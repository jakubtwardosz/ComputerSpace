@page "/login"
@using Microsoft.AspNetCore.WebUtilities
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICartService CartService

<PageTitle>Login</PageTitle>

<MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">Login</MudText>
    <MudGrid Spacing="6" Justify="Justify.Center" Class="mt-16">
        <MudItem xs="6">
            <EditForm Model="user" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField T="string" @bind-Value="user.Email" Label="Email" />
                        <ValidationMessage For="@(() => user.Email)" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField T="string" @bind-Value="user.Password" Label="Password" InputType="InputType.Password" />
                        <ValidationMessage For="@(() => user.Password)" />
                    </MudItem>
                    <MudItem xs="12" Class="d-flex">
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary" Size="Size.Large" Class="mt-8 mb-4">Login</MudButton>
                    </MudItem>
                </MudGrid>
             </EditForm>
             @errorMessage
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private UserLogin user = new UserLogin();
    private string errorMessage = string.Empty;
    private string returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }

    private async Task HandleLogin()
    {
        var result = await AuthService.Login(user);
        if (result.Success)
        {
            errorMessage = string.Empty;

            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            await CartService.StoreCartItems(true);
            await CartService.GetCartItemsCount();
            NavigationManager.NavigateTo(returnUrl);
        }    
        else
        {
            errorMessage = result.Message;
        }
    }
}
