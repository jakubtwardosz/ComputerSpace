@page "/admin/categories"
@inject ICategoryService CategoryService
@attribute [Authorize(Roles = "Admin")]
@implements IDisposable

<MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">Categories</MudText>
    <MudGrid Class="mt-16">
        <MudItem xs="12">

            <MudGrid Class="pb-2 mb-2">
                <MudItem xs="3"><b>Name</b></MudItem>
                <MudItem xs="3"><b>Url</b></MudItem>
                <MudItem xs="3"><b>Visible</b></MudItem>
                <MudItem xs="3"></MudItem>
            </MudGrid>

            @foreach (var category in CategoryService.AdminCategories)
            {
                @if (category.Editing)
                {
                    <EditForm Model="editingCategory" OnSubmit="UpdateCategory">
                        <MudGrid Class="pb-2 mb-2">
                            <MudItem xs="3">
                                <InputText @bind-Value="editingCategory.Name"></InputText>
                            </MudItem>
                            <MudItem xs="3">
                                <InputText @bind-Value="editingCategory.Url"></InputText>
                            </MudItem>
                            <MudItem xs="3" Class="col-visible">
                                <InputCheckbox @bind-Value="editingCategory.Visible"></InputCheckbox>
                            </MudItem>
                            <MudItem xs="3">
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" DisableElevation="true" Color="Color.Success" Size="Size.Small">Upload</MudButton>
                                <MudButton @onclick="CancelEditing" Variant="Variant.Filled" DisableElevation="true" Color="Color.Error" Size="Size.Small">Cancel</MudButton>
                            </MudItem>
                        </MudGrid>
                    </EditForm>
                }
                else
                {
                    <MudGrid Class="pb-2 mb-2">
                        <MudItem xs="3">
                            <MudText>@category.Name</MudText>
                        </MudItem>
                        <MudItem xs="3">
                            <MudText>@category.Url</MudText> 
                        </MudItem>
                        <MudItem xs="3" Class="col-visible">
                            @(category.Visible ? "✅" : "")
                        </MudItem>
                        <MudItem xs="3">
                            <MudButton @onclick="(() => EditCategory(category))" Variant="Variant.Filled" DisableElevation="true" Color="Color.Success" Size="Size.Small">Edit</MudButton>
                            <MudButton @onclick="(() => DeleteCategory(category.Id))" Variant="Variant.Filled" DisableElevation="true" Color="Color.Error" Size="Size.Small">Delete</MudButton>
                        </MudItem>
                    </MudGrid>
                }
            }            
            <MudButton @onclick="CreateNewCategory" Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary" Size="Size.Medium" Class="mt-2">Add new category</MudButton>

        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    Category editingCategory = null;

    protected override async Task OnInitializedAsync()
    {
        await CategoryService.GetAdminCategories();
        CategoryService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        CategoryService.OnChange -= StateHasChanged;
    }

    private void CreateNewCategory()
    {
        editingCategory = CategoryService.CreateNewCategory();
    }

    private void EditCategory(Category category)
    {
        category.Editing = true;
        editingCategory = category;
    }

    private async Task UpdateCategory()
    {
        if (editingCategory.IsNew)
            await CategoryService.AddCategory(editingCategory);
        else
            await CategoryService.UpdateCategory(editingCategory);
        editingCategory = new Category();
    }

    private async Task CancelEditing()
    {
        editingCategory = new Category();
        await CategoryService.GetAdminCategories();
    }

    private async Task DeleteCategory(int id)
    {
        await CategoryService.DeleteCategory(id);
    }
}
