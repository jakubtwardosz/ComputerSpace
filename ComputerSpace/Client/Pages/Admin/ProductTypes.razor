@page "/admin/product-types"
@inject IProductTypeService ProductTypeService
@implements IDisposable
@attribute [Authorize(Roles = "Admin")]

<MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">Product Types</MudText>
    <MudGrid Class="mt-16">
        <MudItem xs="12">
            
        @foreach (var productType in ProductTypeService.ProductTypes)
        {
            @if(productType.Editing)
            {
                <EditForm Model="editingProductType" OnSubmit="UpdateProductType">
                    <MudGrid>
                        <MudItem xs="12" Class="d-flex justify-space-between">
                            <InputText @bind-Value="editingProductType.Name" class="form-control"></InputText>                           
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" DisableElevation="true" Color="Color.Success" Size="Size.Small">Upload</MudButton>                            
                        </MudItem>
                    </MudGrid>
                </EditForm>
            }
            else
            {
                <MudGrid>
                    <MudItem xs="12" Class="d-flex justify-space-between">
                        <MudText>@productType.Name</MudText>
                        <MudButton @onclick="@(() => EditProductType(productType))" Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary" Size="Size.Small">Edit</MudButton> 
                    </MudItem>
                </MudGrid>
            }
        }
        <MudButton @onclick="CreateNewProductType" Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary" Size="Size.Small" Class="mt-4">Add new product type</MudButton>  
  
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    ProductType editingProductType = null;

    protected override async Task OnInitializedAsync()
    {
        await ProductTypeService.GetProductTypes();
        ProductTypeService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        ProductTypeService.OnChange -= StateHasChanged;
    }

    private void EditProductType(ProductType productType)
    {
        productType.Editing = true;
        editingProductType = productType;
    }

    private void CreateNewProductType()
    {
        editingProductType = ProductTypeService.CreateNewProductType();
    }

    private async Task UpdateProductType()
    {
        if (editingProductType.IsNew)
            await ProductTypeService.AddProductType(editingProductType);
        else
            await ProductTypeService.UpdateProductType(editingProductType);
        editingProductType = new ProductType();
    }
}
