@page "/admin/product-types"
@inject IProductTypeService ProductTypeService
@implements IDisposable
@attribute [Authorize(Roles = "Admin")]

<div class="container">
    <div class="col-12">
        <div class="mb-4">
            <h2 class="mb-0">Product Types</h2>
        </div>
    </div>
    <div class="col-12 mb-5">
        @foreach (var productType in ProductTypeService.ProductTypes)
        {
            @if (productType.Editing)
            {
                <EditForm Model="editingProductType" OnSubmit="UpdateProductType">
                    <div class="row mb-2">
                        <div class="col">
                            <InputText @bind-Value="editingProductType.Name" class="form-control"></InputText>
                        </div>
                        <div class="col">
                            <button type="submit" class="btn btn-primary btn-sm">
                                <i class="bi bi-check-lg"></i>
                            </button>
                        </div>
                    </div>
                </EditForm>
            }
            else
            {
                <div class="row mb-2">
                    <div class="col">
                        @productType.Name
                    </div>
                    <div class="col">
                        <button class="btn btn-primary btn-sm" @onclick="@(() => EditProductType(productType))">
                            <i class="bi bi-pencil"></i>
                        </button>
                    </div>
                </div>
            }
        }
        <button class="btn btn-primary" @onclick="CreateNewProductType">
            <i class="bi bi-plus-lg"></i> Add new product type
        </button>
    </div>
</div>

@code {
    ProductType editingProductType = null;

    protected override async Task OnInitializedAsync()
    {
        await ProductTypeService.GetProductTypes();
        ProductTypeService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        ProductTypeService.OnChange -= StateHasChanged;
    }

    private void EditProductType(ProductType productType)
    {
        productType.Editing = true;
        editingProductType = productType;
    }

    private void CreateNewProductType()
    {
        editingProductType = ProductTypeService.CreateNewProductType();
    }

    private async Task UpdateProductType()
    {
        if (editingProductType.IsNew)
            await ProductTypeService.AddProductType(editingProductType);
        else
            await ProductTypeService.UpdateProductType(editingProductType);
        editingProductType = new ProductType();
    }
}