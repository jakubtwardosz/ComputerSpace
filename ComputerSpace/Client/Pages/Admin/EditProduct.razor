@page "/admin/product"
@page "/admin/product/{id:int}"
@inject IProductService ProductService
@inject IProductTypeService ProductTypeService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="container">
    @if (loading)
    {
        <p>@msg</p>
    }
    else
    {
        @if (product.Editing)
        {
            <div class="col-12">
                <div class="mb-4">
                    <h2 class="mb-0">Edit "@product.Title"</h2>
                </div>
            </div>
        }
        else if (product.IsNew)
        {
            <div class="col-12">
                <div class="mb-4">
                    <h2 class="mb-0">Create a new Product</h2>
                </div>
            </div>
        }
        <div class="col-12 mb-5">
            <EditForm Model="product" OnValidSubmit="AddOrUpdateProduct">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="mb-3">
                    <label for="title" class="form-label">Title</label>
                    <InputText type="text" class="form-control" id="title" @bind-Value="product.Title"></InputText>
                </div>
                <div class="mb-3">
                    <label for="imageUrl" class="form-label">Image Url</label>
                    <InputText type="text" class="form-control" id="imageUrl" @bind-Value="product.ImageUrl"></InputText>
                </div>
                <div class="mb-3 edit-product-image">
                    @if (!string.IsNullOrEmpty(product.ImageUrl))
                    {
                        <img src="@product.ImageUrl" class="img-fluid" alt="@product.Title" />
                    }
                    else
                    {
                        foreach (var image in product.Images)
                        {
                            <p>Image carousel</p>
                        }
                    }
                </div>
                <div class="mb-3">
                    <label for="images" class="form-label">Image(s)</label>
                    <InputFile type="file" class="form-control" id="images" OnChange="OnFileChange" multiple></InputFile>
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description</label>
                    <InputTextArea class="form-control" id="description" @bind-Value="product.Description"></InputTextArea>
                </div>

                <div class="mb-2">
                    <div class="row mb-3">
                        <div class="col"><strong>Product Type / Variant</strong></div>
                        <div class="col"><strong>Price</strong></div>
                        <div class="col"><strong>Original Price</strong></div>
                        <div class="col"><strong>Visible</strong></div>
                        <div class="col">&nbsp;</div>
                    </div>
                    @foreach (var variant in product.Variants)
                    {
                        <div class="row mb-2">
                            <div class="col">
                                <InputSelect disabled="@variant.Deleted" @bind-Value="variant.ProductTypeId" class="form-select">
                                    @foreach (var productType in ProductTypeService.ProductTypes)
                                    {
                                        <option value="@productType.Id.ToString()">@productType.Name</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="col">
                                <InputNumber type="number" @bind-Value="variant.Price" class="form-control" disabled="@variant.Deleted"></InputNumber>
                            </div>
                            <div class="col">
                                <InputNumber type="number" @bind-Value="variant.OriginalPrice" class="form-control" disabled="@variant.Deleted"></InputNumber>
                            </div>
                            <div class="col col-visible">
                                <InputCheckbox type="checkbox" @bind-Value="variant.Visible" disabled="@variant.Deleted"></InputCheckbox>
                            </div>
                            <div class="col">
                                <button type="button" class="btn btn-primary btn-sm" disabled="@variant.Deleted" @onclick="@(() => RemoveVariant(variant.ProductTypeId))">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    }
                    <button type="button" class="btn btn-primary btn-sm" @onclick="AddVariant">
                        <i class="oi oi-plus"></i> Add Variant
                    </button>
                </div>

                <div class="mb-3">
                    <label for="category" class="form-label">Category</label>
                    <InputSelect id="category" @bind-Value="product.CategoryId" class="form-select">
                        @foreach (var category in CategoryService.AdminCategories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </InputSelect>
                </div>

                <div class="form-check">
                    <InputCheckbox id="featured" @bind-Value="product.Featured" class="form-check-input"></InputCheckbox>
                    <label for="featured" class="form-check-label">Featured</label>
                </div>
                <div class="form-check">
                    <InputCheckbox id="visible" @bind-Value="product.Visible" class="form-check-input"></InputCheckbox>
                    <label for="visible" class="form-check-label">Visible</label>
                </div>
                <button type="submit" class="btn btn-primary mb-2">@btnText</button>
                <ValidationSummary></ValidationSummary>
            </EditForm>
            @if (!product.IsNew)
            {
                <button type="button" class="btn btn-danger mb-2" @onclick="DeleteProduct">
                    Delete Product
                </button>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    Product product = new Product();
    bool loading = true;
    string btnText = "";
    string msg = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        await ProductTypeService.GetProductTypes();
        await CategoryService.GetAdminCategories();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            product = new Product { IsNew = true };
            btnText = "Create Product";
        }
        else
        {
            Product dbProduct = (await ProductService.GetProduct(Id)).Data;
            if (dbProduct == null)
            {
                msg = $"Product with Id '{Id}' does not exist!";
                return;
            }
            product = dbProduct;
            product.Editing = true;
            btnText = "Update Product";
        }
        loading = false;
    }

    void RemoveVariant(int productTypeId)
    {
        var variant = product.Variants.Find(v => v.ProductTypeId == productTypeId);
        if (variant == null)
        {
            return;
        }
        if (variant.IsNew)
        {
            product.Variants.Remove(variant);
        }
        else
        {
            variant.Deleted = true;
        }
    }

    void AddVariant()
    {
        product.Variants
            .Add(new ProductVariant { IsNew = true, ProductId = product.Id });
    }

    async void AddOrUpdateProduct()
    {
        if (product.IsNew)
        {
            var result = await ProductService.CreateProduct(product);
            NavigationManager.NavigateTo($"admin/product/{result.Id}");
        }
        else
        {
            product.IsNew = false;
            product = await ProductService.UpdateProduct(product);
            NavigationManager.NavigateTo($"admin/product/{product.Id}", true);
        }
    }

    async void DeleteProduct()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            $"Do you really want to delete '{product.Title}'?");
        if (confirmed)
        {
            await ProductService.DeleteProduct(product);
            NavigationManager.NavigateTo("admin/products");
        }
    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        foreach (var image in e.GetMultipleFiles(int.MaxValue))
        {
            var resizedImage = await image.RequestImageFileAsync(format, 200, 200);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            product.Images.Add(new Image { Data = imageData });
        }
    }

    void RemoveImage(int id)
    {
        var image = product.Images.FirstOrDefault(i => i.Id == id);
        if (image != null)
        {
            product.Images.Remove(image);
        }
    }
}