@page "/admin/product"
@page "/admin/product/{id:int}"
@inject IProductService ProductService
@inject IProductTypeService ProductTypeService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">Edit product</MudText>
    <MudGrid Class="mt-16">
        <MudItem xs="12">
            @if (loading)
            {
                <MudText>@msg</MudText>
            }
            else
            {
                @if (product.Editing)
                {
                    <MudText Typo="Typo.subtitle1" GutterBottom="true"><b>Edit @product.Title</b></MudText>
                }
                else if (product.IsNew)
                {
                    <MudText Typo="Typo.subtitle1" GutterBottom="true"><b>Create a new Product</b></MudText>
                }

                <EditForm Model="product" OnValidSubmit="AddOrUpdateProduct">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <MudGrid Class="pb-2 mb-2">
                        <MudItem xs="6">
                            <MudText>Title:</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <InputText id="title" style="width: 100%" @bind-Value="product.Title" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudText>Image Url:</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <InputText id="imageUrl" style="width: 100%" @bind-Value="product.ImageUrl" />
                        </MudItem>
                        <MudItem xs="12">
                            @if (!string.IsNullOrEmpty(product.ImageUrl))
                            {
                                <img src="@product.ImageUrl" />
                            }
                            else
                            {
                                foreach (var image in product.Images)
                                {
                                    <MudCard Class="ma-2">
                                        <MudCardContent>
                                            <MudImage Src="@image.Data" />
                                        </MudCardContent>
                                        <MudCardActions Style="justify-content: center;">
                                            <MudButton Variant="Variant.Filled"
                                           Color="Color.Error"
                                           OnClick="@(() => RemoveImage(image.Id))">
                                                Remove
                                            </MudButton>
                                        </MudCardActions>
                                    </MudCard>
                                }
                            }
                        </MudItem>
                        <MudItem xs="6">
                            <MudText>Image(s)</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <InputFile id="images" OnChange="OnFileChange" multiple />
                        </MudItem>
                        <MudItem xs="6">
                            <MudText>Description</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <InputTextArea id="description" style="width: 100%" @bind-Value="product.Description" />
                        </MudItem>

                        <MudItem xs="12">
                            <MudGrid Class="pb-2 mb-2">
                                <MudItem xs="4"><b>Product Type / Variant</b></MudItem>
                                <MudItem xs="2"><b>Price</b></MudItem>
                                <MudItem xs="2"><b>Original Price</b></MudItem>
                                <MudItem xs="2"><b>Visible</b></MudItem>
                                <MudItem xs="2"><b>Delete</b></MudItem>
                            </MudGrid>

                            @foreach (var variant in product.Variants)
                            {
                                <MudGrid Class="pb-2 mb-2">
                                     <MudItem xs="4">
                                        <InputSelect disabled="@variant.Deleted" @bind-Value="variant.ProductTypeId">
                                            @foreach (var productType in ProductTypeService.ProductTypes)
                                            {
                                            <option value="@productType.Id.ToString()">@productType.Name</option>
                                            }
                                        </InputSelect>
                                    </MudItem>
                                    <MudItem xs="2">
                                        <InputNumber @bind-Value="variant.Price" disabled="@variant.Deleted"></InputNumber>
                                    </MudItem>
                                    <MudItem xs="2">
                                        <InputNumber @bind-Value="variant.OriginalPrice" disabled="@variant.Deleted"></InputNumber>
                                    </MudItem>
                                    <MudItem xs="2">
                                        <InputCheckbox @bind-Value="variant.Visible" disabled="@variant.Deleted"></InputCheckbox>
                                    </MudItem>
                                    <MudItem xs="2">
                                        <MudButton @onclick="@(() => RemoveVariant(variant.ProductTypeId))" Variant="Variant.Filled" DisableElevation="true" Color="Color.Error" Size="Size.Small" disabled="@variant.Deleted">Delete</MudButton>
                                    </MudItem>
                                </MudGrid>
                            }
                        </MudItem>

                        <MudItem xs="12">
                            <MudButton @onclick="AddVariant" Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary" Size="Size.Medium" Class="mt-2">Add Variant</MudButton>
                        </MudItem>

                        <MudItem xs="12">
                            <MudGrid>
                                <MudItem xs="6">
                                    <MudText>Category</MudText>
                                </MudItem>
                                <MudItem xs="6">
                                    <InputSelect id="category" @bind-Value="product.CategoryId" style="width: 100%">
                                        @foreach (var category in CategoryService.AdminCategories)
                                        {
                                        <option value="@category.Id">@category.Name</option>
                                        }
                                </InputSelect>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudText>Featured</MudText>
                                </MudItem>
                                <MudItem xs="6">
                                    <InputCheckbox id="featured" @bind-Value="product.Featured" class="form-check-input"></InputCheckbox>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudText>Visible</MudText>
                                </MudItem>
                                <MudItem xs="6">
                                    <InputCheckbox id="visible" @bind-Value="product.Visible" class="form-check-input"></InputCheckbox>
                                </MudItem>
                            </MudGrid>
                        </MudItem>

                        <MudItem xs="12">
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary" Size="Size.Medium" Class="mt-2">@btnText</MudButton>
                        </MudItem>
                    </MudGrid>
                <ValidationSummary></ValidationSummary>
            </EditForm>
                @if (!product.IsNew)
                {
                    <MudButton @onclick="DeleteProduct" Variant="Variant.Filled" DisableElevation="true" Color="Color.Error" Size="Size.Medium">Delete Product</MudButton>
                }
            }
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [Parameter]
    public int Id { get; set; }

    Product product = new Product();
    bool loading = true;
    string btnText = "";
    string msg = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        await ProductTypeService.GetProductTypes();
        await CategoryService.GetAdminCategories();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            product = new Product { IsNew = true };
            btnText = "Create Product";
        }
        else
        {
            Product dbProduct = (await ProductService.GetProduct(Id)).Data;
            if (dbProduct == null)
            {
                msg = $"Product with Id '{Id}' does not exist!";
                return;
            }
            product = dbProduct;
            product.Editing = true;
            btnText = "Update Product";
        }
        loading = false;
    }

    void RemoveVariant(int productTypeId)
    {
        var variant = product.Variants.Find(v => v.ProductTypeId == productTypeId);
        if (variant == null)
        {
            return;
        }
        if (variant.IsNew)
        {
            product.Variants.Remove(variant);
        }
        else
        {
            variant.Deleted = true;
        }
    }

    void AddVariant()
    {
        product.Variants
            .Add(new ProductVariant { IsNew = true, ProductId = product.Id });
    }

    async void AddOrUpdateProduct()
    {
        if (product.IsNew)
        {
            var result = await ProductService.CreateProduct(product);
            NavigationManager.NavigateTo($"admin/product/{result.Id}");
        }
        else
        {
            product.IsNew = false;
            product = await ProductService.UpdateProduct(product);
            NavigationManager.NavigateTo($"admin/product/{product.Id}", true);
        }
    }

    async void DeleteProduct()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            $"Do you really want to delete '{product.Title}'?");
        if (confirmed)
        {
            await ProductService.DeleteProduct(product);
            NavigationManager.NavigateTo("admin/products");
        }
    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        foreach (var image in e.GetMultipleFiles(int.MaxValue))
        {
            var resizedImage = await image.RequestImageFileAsync(format, 200, 200);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            product.Images.Add(new Image { Data = imageData });
        }
    }

    void RemoveImage(int id)
    {
        var image = product.Images.FirstOrDefault(i => i.Id == id);
        if (image != null)
        {
            product.Images.Remove(image);
        }
    }
}