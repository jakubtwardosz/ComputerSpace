@page "/product/{id:int}"
@inject IProductService ProductService
@inject ICartService CartService

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-16">
@if (product == null)
{
    <span>@message</span>
}
else
{
    <div class="media">
        <div class="media-img-wrapper mr-2">
            @if(!string.IsNullOrEmpty(product.ImageUrl))
            {
                <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
            }
            else
            {
                <MudCarousel Class="mud-with-full" ItemsSource="@product.Images" Style="height: 200px">
                    <ItemTemplate>
                        <MudImage Src="@context.Data"></MudImage>
                    </ItemTemplate>
                </MudCarousel>
            }            
        </div>
        <div class="media-body">
            <h2 class="mb-0">@product.Title</h2>
            <p>@product.Description</p>

            @if (product.Variants != null && product.Variants.Count > 1)
            {
                    @*How to bind it @currentTypeId?*@
                    <MudSelect T="string" Label="Coffee" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var variant in product.Variants)
                        {
                            <MudSelectItem Value="@variant.ProductType.Name" />
                        }
                    </MudSelect>
            }

            @if(GetSelectedVariant() != null)
            {
                @if(GetSelectedVariant().OriginalPrice > GetSelectedVariant().Price)
                {
                    <h6 class="text-muted original-price">
                        @GetSelectedVariant().OriginalPrice zł
                    </h6>
                }
                <h4 class="price">
                    @GetSelectedVariant().Price zł
                </h4>
            }
            <MudFab StartIcon="@Icons.Filled.ShoppingCart" Label="Add to Cart" Color="Color.Tertiary" OnClick="@AddToCart" />
        </div>
    </div>
}
</MudContainer>

<Footer />

@code {
    private Product? product = null;
    private string message = string.Empty;
    private int currentTypeId = 1;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        message = "Loading product...";

        var result = await ProductService.GetProduct(Id);   

        if(!result.Success)
        {
            message = result.Message;
        }
        else
        {
            product = result.Data;
            if (product.Variants.Count > 0)
            {
                currentTypeId = product.Variants[0].ProductTypeId;
            }
        }
    }
    private ProductVariant GetSelectedVariant()
    {
        var variant = product.Variants.FirstOrDefault(v => v.ProductTypeId == currentTypeId);
        return variant;
    }

    private async Task AddToCart()
    {
        var productVariant = GetSelectedVariant();
        var cartItem = new CartItem
        {
            ProductId = productVariant.ProductId,
            ProductTypeId = productVariant.ProductTypeId
        };

        await CartService.AddToCart(cartItem);
    }
}