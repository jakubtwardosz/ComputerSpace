@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Shopping Cart</PageTitle>

<div class="container">
    <div class="col-12">
        <div class="mb-4">
            <h2 class="mb-0">Shop Cart</h2>
            <small>Start checkout now!</small>
        </div>
    </div>

    <div class="col-12 mb-5">
        @if (cartProducts == null || cartProducts.Count == 0)
        {
            <span>@message</span>
        }
        else
        {
            <ul class="list-group mb-2">
                @foreach (var product in cartProducts)
                {
                    <li class="list-group-item">
                        <div class="row align-items-center">
                            <div class="col-3 col-md-2">
                                <img src="@product.ImageUrl" alt="@product.Title" class="img-fluid cart-product-image">
                            </div>
                            <div class="col-4 col-md-6 col-lg-5">
                                <a href="/product/@product.ProductId">
                                    <h6 class="mb-0">@product.Title</h6>
                                </a>
                                <span><small class="text-muted">@product.ProductType</small></span>
                                <div class="mt-2 small lh-1">
                                    <a class="btn btn-sm btn-primary" @onclick="@(() => RemoveProductFromCart(product.ProductId, product.ProductTypeId))" role="button">
                                        <i class="bi bi-trash"></i>Remove
                                    </a>
                                </div>
                            </div>
                            <div class="col-3 col-md-3 col-lg-3">
                                    <input type="number" value="@product.Quantity"
                                           @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))"
                                           class="form-control form-control-sm form-input"
                                           min="1" />
                            </div>
                            <div class="col-2 text-lg-end text-start text-md-end col-md-2">
                                <span class="fw-bold">$@(product.Price * product.Quantity)</span>
                            </div>
                        </div>
                    </li>
                }
            </ul>

            <p class="fw-bold text-end">
                Total (@cartProducts.Count): $@cartProducts.Sum(product => @product.Price * product.Quantity)
            </p>

            @if (isAuthenticated)
            {
                <div class="mb-2">
                    <h5>Delivery Address</h5>
                    <AddressForm />
                </div>
            }
            <div class="d-flex justify-content-end mb-2">
                    <button @onclick="PlaceOrder" class="btn btn-success">Checkout</button>
            </div>
            
        }

    </div>
</div>

@code {
    List<CartProductResponse> cartProducts = null;
    string message = "Loading cart...";
    bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await AuthService.IsUserAuthenticated();
        await LoadCart();
    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        await CartService.GetCartItemsCount();
        cartProducts = await CartService.GetCartProducts();
        if (cartProducts == null || cartProducts.Count == 0)
        {
            message = "Your cart is empty.";
        }
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponse product)
    {
        product.Quantity = int.Parse(e.Value.ToString());
        if (product.Quantity < 1)
            product.Quantity = 1;
        await CartService.UpdateQuantity(product);
    }

    private async Task PlaceOrder()
    {
        string url = await OrderService.PlaceOrder();
        NavigationManager.NavigateTo(url);
    }
}