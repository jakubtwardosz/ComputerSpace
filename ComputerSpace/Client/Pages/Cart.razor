@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService

<PageTitle>Koszyk</PageTitle>
<h3>Koszyk</h3>

@if (cartProducts == null || cartProducts.Count == 0)
{
    <span>@message</span>
}
else if (orderPlaced)
{
    <span>Dziękujemy za złożenie zamówienia! Status możesz sprawdzić na stronie z <a href="orders">podsumowaniem</a></span>
}
else
{
    <div>
        @foreach (var product in cartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image"/>
                </div>
                <div class="name">
                    <h5><a href="/product/@product.ProductId"></a></h5>
                    <span>@product.ProductType</span><br/>
                    <input type="number" value="@product.Quantity"
                        @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))"
                        class="form-control input-quantity"
                        min="1" />
                    <button class="btn-delete" @onclick="@(() =>
                        RemoveProductFromCart(product.ProductId, product.ProductTypeId))">Usuń produkt</button>
                </div>
                <div class="cart-product-price">@(product.Price * product.Quantity) zł</div>
            </div>
        }
        <div class="cart-product-price">
            Łączna kwota (@cartProducts.Count): @cartProducts.Sum(product => @product.Price * product.Quantity) zł
        </div>
    </div>
    <button @onclick="PlaceOrder" class="btn alert-success float-end mt-1">Złóż zamówienie</button>
}

@code {
    List<CartProductResponse> cartProducts = null;
    string message = "Loading cart...";
    bool orderPlaced = false;

    protected override async Task OnInitializedAsync()
    {
        orderPlaced = false;
        await LoadCart();
    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        await CartService.GetCartItemsCount();
        cartProducts = await CartService.GetCartProducts();

        if (cartProducts == null || cartProducts.Count == 0)
        {
            message = "Your cart is empty.";
        }
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponse product)
    {
        product.Quantity = int.Parse(e.Value.ToString());
        if (product.Quantity < 1)
            product.Quantity = 1;
        await CartService.UpdateQuantity(product);
    }

    private async Task PlaceOrder()
    {
        await OrderService.PlaceOrder();
        await CartService.GetCartItemsCount();
        orderPlaced = true;
    }
}
