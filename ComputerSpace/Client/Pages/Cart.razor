@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Shopping Cart</PageTitle>

<div class="container">
    <div class="row">
        <div class="border-bottom">
            <div class="text-start">
                <h5 class="mb-0 fs-4">Shop Cart</h5>
                <small>Location in 382480</small>
            </div>
        </div>

        @if (cartProducts == null || cartProducts.Count == 0)
        {
            <span>@message</span>
        }
        else
        {
            <div>
                <div class="alert alert-danger p-2" role="alert">
                    You’ve got FREE delivery. Start <a href="#!" class="alert-link">checkout now!</a>
                </div>

                <ul class="list-group list-group-flush">
                    @foreach (var product in cartProducts)
                    {
                        <li class="list-group-item py-3 ps-0">
                            <div class="row align-items-center">
                                <div class="col-3 col-md-2">
                                    <img src="@product.ImageUrl" alt="Ecommerce" class="img-fluid">
                                </div>
                                <div class="col-4 col-md-6 col-lg-5">
                                    <a href="/product/@product.ProductId" class="text-inherit">
                                        <h6 class="mb-0">@product.Title</h6>
                                    </a>
                                    <span><small class="text-muted">@product.ProductType</small></span>
                                    <div class="mt-2 small lh-1">
                                        <a @onclick="@(() => RemoveProductFromCart(product.ProductId, product.ProductTypeId))" class="text-decoration-none text-inherit">
                                            <span class="me-1 align-text-bottom">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-trash-2 text-success">
                                                    <polyline points="3 6 5 6 21 6"></polyline>
                                                    <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2">
                                                    </path>
                                                    <line x1="10" y1="11" x2="10" y2="17"></line>
                                                    <line x1="14" y1="11" x2="14" y2="17"></line>
                                                </svg>
                                            </span><span class="text-muted">Remove</span>
                                        </a>
                                    </div>
                                </div>
 
                                <div class="col-3 col-md-3 col-lg-3">
                                    <div class="input-group input-spinner  ">
                                        <input type="number" value="@product.Quantity"
                                               @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))"
                                               class="form-control form-control-sm form-input"
                                               min="1" />
                                    </div>
                                </div>

                                <div class="col-2 text-lg-end text-start text-md-end col-md-2">
                                    <span class="fw-bold">$@(product.Price * product.Quantity)</span>
                                </div>
                            </div>
                        </li>
                    }
                </ul>
                <div class="cart-product-price">
                    Total (@cartProducts.Count): $@cartProducts.Sum(product => @product.Price * product.Quantity)
                </div>
            </div>
            @if (isAuthenticated)
            {
                <div>
                    <h5>Delivery Address</h5>
                    <AddressForm />
                </div>
            }
            <button @onclick="PlaceOrder" class="btn alert-success float-end mt-1">Checkout</button>
        }
    </div>
</div>

@code {
    List<CartProductResponse> cartProducts = null;
    string message = "Loading cart...";
    bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await AuthService.IsUserAuthenticated();
        await LoadCart();
    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        await CartService.GetCartItemsCount();
        cartProducts = await CartService.GetCartProducts();
        if (cartProducts == null || cartProducts.Count == 0)
        {
            message = "Your cart is empty.";
        }
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponse product)
    {
        product.Quantity = int.Parse(e.Value.ToString());
        if (product.Quantity < 1)
            product.Quantity = 1;
        await CartService.UpdateQuantity(product);
    }

    private async Task PlaceOrder()
    {
        string url = await OrderService.PlaceOrder();
        NavigationManager.NavigateTo(url);
    }
}