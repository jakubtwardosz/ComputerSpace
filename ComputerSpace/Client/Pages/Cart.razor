@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Cart</PageTitle>

<MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">Cart</MudText>

    @if (cartProducts == null || cartProducts.Count == 0)
    {
        <MudText Align="Align.Center">@message</MudText>
    }
    else
    {
        <MudGrid Spacing="0" Class="mt-16">

            @foreach (var product in cartProducts)
            {
                <MudItem xs="12">
                    <MudGrid>
                        <MudItem xs="12" sm="3">

                            <MudImage Src="@product.ImageUrl" Width="154" Height="133" Elevation="0" Class="ma-4" />
                        </MudItem>

                        <MudItem xs="12" sm="4">
                            <a href="/product/@product.ProductId"><MudText Typo="Typo.h6">@product.Title</MudText></a>
                            <MudText Typo="Typo.subtitle1">@product.ProductType</MudText>
                        </MudItem>
                        <MudItem xs="12" sm="2">
                            <MudText>@(product.Price * product.Quantity) zł</MudText>
                        </MudItem>
                        <MudItem xs="12" sm="2">

                            <input type="number" value="@product.Quantity" class="input-quantity"
                           @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))"
                           min="1" />
                        
                        </MudItem>
                        <MudItem xs="12" sm="1">   
                        
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" @onclick="@(() => RemoveProductFromCart(product.ProductId, product.ProductTypeId))" Variant="Variant.Filled" DisableElevation="true" Color="Color.Error" Size="Size.Small"/>
                            

                        </MudItem>
                    </MudGrid>
                </MudItem>
            }
            <MudItem xs="12">
                <MudText Align="Align.End">Łączna kwota (@cartProducts.Count): @cartProducts.Sum(product => @product.Price * product.Quantity) zł</MudText>
            </MudItem>
            @if (isAuthenticated)
            {
                <MudItem xs="12">
                    <MudText Typo="Typo.h5" GutterBottom="true">Delivery Address</MudText>
                    <AddressForm />
                </MudItem>
            }
            <MudItem xs="12" Class="d-flex justify-end">
                <MudButton @onclick="PlaceOrder" Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary" Size="Size.Large" Class="mt-8">Checkout</MudButton>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    List<CartProductResponse> cartProducts = null;
    string message = "Loading cart...";
    bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await AuthService.IsUserAuthenticated();
        await LoadCart();
    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        await CartService.GetCartItemsCount();
        cartProducts = await CartService.GetCartProducts();

        if (cartProducts == null || cartProducts.Count == 0)
        {
            message = "Your cart is empty.";
        }
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponse product)
    {
        product.Quantity = int.Parse(e.Value.ToString());
        if (product.Quantity < 1)
            product.Quantity = 1;
        await CartService.UpdateQuantity(product);
    }

    private async Task PlaceOrder()
    {
        string url = await OrderService.PlaceOrder();
        NavigationManager.NavigateTo(url);
    }
}
