@inject NavigationManager NavigationManager
@inject IProductService ProductService


<div class="col-xxl-6 col-lg-5 d-none d-lg-block">
    <div class="input-group">
        <input @bind-value="searchText"
               @bind-value:event="oninput"
               type="search"
               list="products"
               @onkeyup="HandleSearch"
               class="form-control rounded-3"
               placeholder="Search for products"
               id="searchInput"
               @ref="searchInput" />
        <datalist id="products">
            @foreach (var suggestion in suggestions)
            {
                <option>@suggestion</option>
            }
        </datalist>
        <span class="input-group-append">
            <button class="btn bg-white border border-start-0 ms-n10" type="button" @onclick="SearchProducts">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-search">
                    <circle cx="11" cy="11" r="8"></circle>
                    <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                </svg>
            </button>
        </span>
    </div>
</div>

@code {
    private string searchText = string.Empty;
    private List<string> suggestions = new List<string>();
    protected ElementReference searchInput;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await searchInput.FocusAsync();
        }
    }

    public void SearchProducts()
    {
        NavigationManager.NavigateTo($"search/{searchText}/1");
    }

    public async Task HandleSearch(KeyboardEventArgs args)
    {
        if (args.Key == null || args.Key.Equals("Enter"))
        {
            SearchProducts();
        }
        else if (searchText.Length > 1)
        {
            suggestions = await ProductService.GetProductSearchSuggestions(searchText);
        }
    }
}