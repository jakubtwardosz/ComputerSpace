@inject NavigationManager NavigationManager
@inject IProductService ProductService


<div class="col-xxl-6 col-lg-7 d-none d-lg-block">
    <div class="input-group">
        <input @bind-value="searchText"
               @bind-value:event="oninput"
               type="search"
               list="products"
               @onkeyup="HandleSearch"
               class="form-control rounded-3"
               placeholder="Search for products"
               id="searchInput"
               @ref="searchInput" />
        <datalist id="products">
            @foreach (var suggestion in suggestions)
            {
                <option>@suggestion</option>
            }
        </datalist>
        <span class="input-group-append">
            <button class="btn btn-primary" type="button" @onclick="SearchProducts">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                    <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
                </svg>
            </button>
        </span>
    </div>
</div>

@code {
    private string searchText = string.Empty;
    private List<string> suggestions = new List<string>();
    protected ElementReference searchInput;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await searchInput.FocusAsync();
        }
    }

    public void SearchProducts()
    {
        NavigationManager.NavigateTo($"search/{searchText}/1");
    }

    public async Task HandleSearch(KeyboardEventArgs args)
    {
        if (args.Key == null || args.Key.Equals("Enter"))
        {
            SearchProducts();
        }
        else if (searchText.Length > 1)
        {
            suggestions = await ProductService.GetProductSearchSuggestions(searchText);
        }
    }
}