@inject IProductService ProductService
@implements IDisposable;

<MudContainer MaxWidth="MaxWidth.Large" Class="pt-8">

    @if (ProductService.Products == null || ProductService.Products.Count == 0)
    {
        <span>@ProductService.Message</span>
    }
    else
    {
        <ul>
            @foreach (var product in ProductService.Products)
            {

                <li class="media my-3">
                    <div class="media-img-wrapper">
                        <a href="/product/@product.Id">
                            @if (!string.IsNullOrEmpty(product.ImageUrl))
                            {
                                <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
                            }
                            else if (product.Images.Count > 0)
                            {
                                <img src="@product.Images[0].Data" />
                            }
                        </a>
                    </div>
                    <div class="ml-4">
                        <a href="/product/@product.Id">
                            <MudText Typo="Typo.body1"><b>@product.Title</b></MudText>
                        </a>
                        <p>@product.Description</p>
                        <MudText Typo="Typo.body2" Class="price">@GetPriceText(product)</MudText>
                    </div>
                </li>
            }
        </ul>
        for (var i = 1; i <= ProductService.PageCount; i++)
        {
            <a class="btn
                 @(i == ProductService.CurrentPage ? "btn-info" : "btn-outline-info")
                 page-selection"
       href="/search/@ProductService.LastSearchText/@i">@i</a>
        }
    }

</MudContainer>

@code {

    protected override void OnInitialized()
    {
        ProductService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;
        if (variants.Count == 0)
        {
            return string.Empty;
        }
        else if (variants.Count == 1)
        {
            return $"{variants[0].Price}zł";
        }
        decimal minPrice = variants.Min(v => v.Price);

        return $"Cena od {minPrice}zł";
    }
}
