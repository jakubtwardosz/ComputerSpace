@inject IProductService ProductService
@implements IDisposable
<div class="container">
    @if (ProductService.Products == null || ProductService.Products.Count == 0)
    {
        <span>@ProductService.Message</span>
    }
    else
    {
        <div class="row g-4 row-cols-1 my-3">
            @foreach (var product in ProductService.Products)
            {
                <div class="col">
                    <div class="card card-product">
                        <div class="card-body">
                            <div class="row align-items-center">
                                <div class="col-md-4 col-12">
                                    <div class="text-center position-relative ">
                                        <a href="/product/@product.Id">
                                            @if (!string.IsNullOrEmpty(product.ImageUrl))
                                            {
                                                <img src="@product.ImageUrl" alt="@product.Title" class="mb-3 img-fluid w-50" />
                                            }
                                            else if (product.Images.Count > 0)
                                            {
                                                <img src="@product.Images[0].Data" alt="@product.Title" class="mb-3 img-fluid w-50" />
                                            }
                                        </a>
                                    </div>
                                </div>
                                <div class="col-md-8 col-12 flex-grow-1">
                                    <h2 class="fs-6">
                                        <a href="/product/@product.Id" class="text-inherit text-decoration-none">@product.Title</a>
                                    </h2>
                                    <div class="mt-6">
                                        <div>
                                            <span class="text-dark">@GetPriceText(product)</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <nav>
            <ul class="pagination justify-content-center">
                @for (var i = 1; i <= ProductService.PageCount; i++)
                {
                    <li class="page-item">
                        <a class="page-link @(i == ProductService.CurrentPage ? "active" : "")" 
                           href="/search/@ProductService.LastSearchText/@i">@i</a>
                    </li>
                }
            </ul>
        </nav>
    }
</div>

@code {
    protected override void OnInitialized()
    {
        ProductService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;
        if (variants.Count == 0)
        {
            return string.Empty;
        }
        else if (variants.Count == 1)
        {
            return $"${variants[0].Price}";
        }
        decimal minPrice = variants.Min(v => v.Price);
        return $"Starting at ${minPrice}";
    }
}